`timescale 1ns / 1ps

module barrelShifter_32
    (
        input logic [31:0]data,         //changed 15 ->31
        input logic lr,
        input logic [4:0] shiftAmt,    // changed 3 -> 4
        output logic [31:0]f              //changed 15 ->31
    );
    
    //signal declarations
     logic [31:0] r0,r1,r2,r3;             //changed 15 ->31
     logic [31:0] L0,L1,L2,L3;         //add 1 additional stage
     logic [31:0]x0,x1;                
     
      //rotate right
      
      assign r0 = shiftAmt[0] ? {data[0], data[31:1]} : data;     //Stage 0, rotate by 0 or 1
      
      assign r1 = shiftAmt[1] ? {r0[1:0], r0[31:2]} : r0;          //Stage 1. rotate by 0 or 2
      
      assign r2= shiftAmt[2] ? {r1[3:0], r1[31:4]} : r1;          //Stage 2, rotate by 0 or 4  
      
      assign r3= shiftAmt[3] ? {r2[7:0], r2[31:8]} : r2;          //Stage 3, rotate by 0 or 8     
      
      assign x0= shiftAmt[4] ? {r3[15:0], r3[31:16]} : r3;     //Stage 4, rotate by 0 or 16          
      
      //rotate left
      
      assign L0 = shiftAmt[0] ? {data[30:0], data[31]} : data;     //Stage 0, rotate by 0 or 1
      
      assign L1 = shiftAmt[1] ? {L0[29:0], L0[31:30]} : L0;          //Stage 1. rotate by 0 or 2
      
      assign L2= shiftAmt[2] ? {L1[27:0], L1[31:28]} : L1;          //Stage 2, rotate by 0 or 4  
      
      assign L3 = shiftAmt[3] ? {L2[23:0], L2[31:24]} : L2;          //Stage 3, rotate by 0 or 8         
  
      assign x1 = shiftAmt[4] ? {L3[15:0], L3[31:16]} : L3;          //Stage 3, rotate by 0 or 16                
           
      mux_2to1 M0(.a(x0),.b(x1),.s(lr),.f(f));                           //instantiate 2 to 1 MUX 
      
endmodule