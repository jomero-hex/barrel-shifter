`timescale 1ns / 1ps

module barrelShifter
    (
        input logic [7:0]data,     
        input logic lr,
        input logic [2:0] shiftAmt,
        output logic [7:0]f
    );
    
    //signal declarations
     logic [7:0] r0,r1;
     logic [7:0] L0,L1;
     logic [7:0]x0,x1;
     
      //rotate right
      
      assign r0 = shiftAmt[0] ? {data[0], data[7:1]} : data;     //Stage 0, rotate by 0 or 1
      
      assign r1 = shiftAmt[1] ? {r0[1:0], r0[7:2]} : r0;          //Stage 1. rotate by 0 or 2
      
      assign x0= shiftAmt[2] ? {r1[3:0], r1[7:4]} : r1;          //Stage 2, rotate by 0 or 4       
            
      //rotate shift
      
       assign L0 = shiftAmt[0] ? {data[6:0], data[7]} : data;     //Stage 0, rotate by 0 or 1
      
      assign L1 = shiftAmt[1] ? {L0[5:0], L0[7:6]} : L0;          //Stage 1. rotate by 0 or 2
      
      assign x1 = shiftAmt[2] ? {L1[3:0], L1[7:4]} : L1;          //Stage 2, rotate by 0 or 4                
     
     mux_2to1 M0(.a(x0),.b(x1),.s(lr),.f(f));                           //instantiate 2 to 1 MUX            
  
endmodule